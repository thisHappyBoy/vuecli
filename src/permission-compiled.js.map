{"version":3,"sources":["permission.js"],"names":[],"mappings":";AACA,SAAS,cAAT,EAAyB,iBAAzB,QAAkD,IAAlD;;AAEA,SAAS,aAAT,CAAuB,KAAvB,EAA8B,KAA9B,EAAqC;AACjC,QAAI,MAAM,IAAN,IAAc,MAAM,IAAN,CAAW,IAA7B,EAAmC;AAC/B,eAAO,MAAM,IAAN,CAAW,QAAQ,MAAM,IAAN,CAAW,IAAX,CAAgB,OAAhB,CAAwB,IAAxB,KAAiC,CAApD,CAAP;AACH,KAFD,MAEO;AACH,eAAO,IAAP;AACH;AACJ;;AAED,MAAM,aAAa;AACf,WAAO;AACH,iBAAS,iBADN;AAEH,oBAAY;AAFT,KADQ;AAKf,eAAW;AACP,qBAAa,CAAC,KAAD,EAAQ,OAAR,KAAoB;AAC7B,kBAAM,UAAN,GAAmB,OAAnB;AACA,kBAAM,OAAN,GAAgB,kBAAkB,MAAlB,CAAyB,OAAzB,CAAhB;AACH;AAJM,KALI;AAWf,aAAS;AACL,uBAAe,EAAE,MAAF,EAAf,EAA2B,IAA3B,EAAiC;AAC7B,mBAAO,IAAI,OAAJ,CAAY,WAAW;AAC1B,sBAAM,EAAE,KAAF,KAAY,IAAlB;AACA,sBAAM,kBAAkB,eAAe,MAAf,CAAsB,KAAK;AAC/C,wBAAI,MAAM,OAAN,CAAc,OAAd,KAA0B,CAA9B,EAAiC,OAAO,IAAP;AACjC,wBAAI,cAAc,KAAd,EAAqB,CAArB,CAAJ,EAA6B;AACzB,4BAAI,EAAE,QAAF,IAAc,EAAE,QAAF,CAAW,MAAX,GAAoB,CAAtC,EAAyC;AACrC,8BAAE,QAAF,GAAa,EAAE,QAAF,CAAW,MAAX,CAAkB,SAAS;AACpC,oCAAI,cAAc,KAAd,EAAqB,KAArB,CAAJ,EAAiC;AAC7B,2CAAO,KAAP;AACH;AACD,uCAAO,KAAP;AACH,6BALY,CAAb;AAMA,mCAAO,CAAP;AACH,yBARD,MAQO;AACH,mCAAO,CAAP;AACH;AACJ;AACD,2BAAO,KAAP;AACH,iBAhBuB,CAAxB;AAiBA,uBAAO,aAAP,EAAsB,eAAtB;AACA;AACH,aArBM,CAAP;AAsBH;AAxBI;AAXM,CAAnB;;AAuCA,eAAe,UAAf","file":"permission-compiled.js","sourcesContent":["// store/permission.js\r\nimport { asyncRouterMap, constantRouterMap } from './';\r\n\r\nfunction hasPermission(roles, route) {\r\n    if (route.meta && route.meta.role) {\r\n        return roles.some(role => route.meta.role.indexOf(role) >= 0)\r\n    } else {\r\n        return true\r\n    }\r\n}\r\n\r\nconst permission = {\r\n    state: {\r\n        routers: constantRouterMap,\r\n        addRouters: []\r\n    },\r\n    mutations: {\r\n        SET_ROUTERS: (state, routers) => {\r\n            state.addRouters = routers;\r\n            state.routers = constantRouterMap.concat(routers);\r\n        }\r\n    },\r\n    actions: {\r\n        GenerateRoutes({ commit }, data) {\r\n            return new Promise(resolve => {\r\n                const { roles } = data;\r\n                const accessedRouters = asyncRouterMap.filter(v => {\r\n                    if (roles.indexOf('admin') >= 0) return true;\r\n                    if (hasPermission(roles, v)) {\r\n                        if (v.children && v.children.length > 0) {\r\n                            v.children = v.children.filter(child => {\r\n                                if (hasPermission(roles, child)) {\r\n                                    return child\r\n                                }\r\n                                return false;\r\n                            });\r\n                            return v\r\n                        } else {\r\n                            return v\r\n                        }\r\n                    }\r\n                    return false;\r\n                });\r\n                commit('SET_ROUTERS', accessedRouters);\r\n                resolve();\r\n            })\r\n        }\r\n    }\r\n};\r\n\r\nexport default permission;\r\n\r\n"]}